Qflow synthesis logfile created on Tue Nov 7 18:21:31 HKT 2017
Running yosys for verilog parsing and synthesis

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2016  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.7+ (git sha1 UNKNOWN, gcc 7.2.1 -fPIC -Os)


-- Executing script file `counter.ys' --

1. Executing Liberty frontend.
Imported 32 cell types from liberty file.

2. Executing Verilog-2005 frontend.
Parsing Verilog input from `/home/leviathan/qtflow_test2/source/counter.v' to AST representation.
Generating RTLIL representation for module `\counter'.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \counter

3.1.2. Analyzing design hierarchy..
Top module:  \counter
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.2.3. Executing PROC_INIT pass (extract init attributes).

3.2.4. Executing PROC_ARST pass (detect async resets in processes).

3.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\counter.$proc$/home/leviathan/qtflow_test2/source/counter.v:20$7'.
     1/1: $0\q[3:0]
Creating decoders for process `\counter.$proc$/home/leviathan/qtflow_test2/source/counter.v:9$1'.
     1/4: $0\r[3:0] [3]
     2/4: $0\r[3:0] [2]
     3/4: $0\r[3:0] [1]
     4/4: $0\r[3:0] [0]

3.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

3.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\counter.\q' using process `\counter.$proc$/home/leviathan/qtflow_test2/source/counter.v:20$7'.
  created $dff cell `$procdff$25' with positive edge clock.
Creating register for signal `\counter.\r' using process `\counter.$proc$/home/leviathan/qtflow_test2/source/counter.v:9$1'.
  created $dff cell `$procdff$26' with positive edge clock.

3.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\counter.$proc$/home/leviathan/qtflow_test2/source/counter.v:20$7'.
Removing empty process `counter.$proc$/home/leviathan/qtflow_test2/source/counter.v:20$7'.
Found and cleaned up 1 empty switch in `\counter.$proc$/home/leviathan/qtflow_test2/source/counter.v:9$1'.
Removing empty process `counter.$proc$/home/leviathan/qtflow_test2/source/counter.v:9$1'.
Cleaned up 2 empty switches.

3.3. Executing OPT_EXPR pass (perform const folding).
Replacing $eq cell `$eq$/home/leviathan/qtflow_test2/source/counter.v:10$2' (1) in module `\counter' with constant driver `$eq$/home/leviathan/qtflow_test2/source/counter.v:10$2_Y = \clr'.
Replacing $eq cell `$eq$/home/leviathan/qtflow_test2/source/counter.v:21$8' (1) in module `\counter' with constant driver `$eq$/home/leviathan/qtflow_test2/source/counter.v:21$8_Y = \clr'.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
  removed 12 unused temporary wires.
Removed 0 unused cells and 12 unused wires.

3.5. Executing CHECK pass (checking for obvious problems).
checking module counter..
found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Removed a total of 0 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$11 (pure)
    Root of a mux tree: $procmux$14 (pure)
    Root of a mux tree: $procmux$17 (pure)
    Root of a mux tree: $procmux$20 (pure)
    Root of a mux tree: $procmux$23 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter.
Performed a total of 0 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Removed a total of 0 cells.

3.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Removed 0 unused cells and 12 unused wires.

3.6.8. Executing OPT_EXPR pass (perform const folding).

3.6.9. Finished OPT passes. (There is nothing left to do.)

3.7. Executing WREDUCE pass (reducing word size of cells).

3.8. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module counter:
  creating $macc model for $add$/home/leviathan/qtflow_test2/source/counter.v:25$9 ($add).
  creating $alu model for $macc $add$/home/leviathan/qtflow_test2/source/counter.v:25$9.
  creating $alu cell for $add$/home/leviathan/qtflow_test2/source/counter.v:25$9: $auto$alumacc.cc:474:replace_alu$27
  created 1 $alu and 0 $macc cells.

3.9. Executing SHARE pass (SAT-based resource sharing).

3.10. Executing OPT pass (performing simple optimizations).

3.10.1. Executing OPT_EXPR pass (perform const folding).

3.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Removed a total of 0 cells.

3.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$11 (pure)
    Root of a mux tree: $procmux$14 (pure)
    Root of a mux tree: $procmux$17 (pure)
    Root of a mux tree: $procmux$20 (pure)
    Root of a mux tree: $procmux$23 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter.
Performed a total of 0 changes.

3.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Removed a total of 0 cells.

3.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Removed 0 unused cells and 12 unused wires.

3.10.8. Executing OPT_EXPR pass (perform const folding).

3.10.9. Finished OPT passes. (There is nothing left to do.)

3.11. Executing FSM pass (extract and optimize FSM).

3.11.1. Executing FSM_DETECT pass (finding FSMs in design).

3.11.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.11.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Removed 0 unused cells and 12 unused wires.

3.11.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.11.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.11.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.11.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.12. Executing OPT pass (performing simple optimizations).

3.12.1. Executing OPT_EXPR pass (perform const folding).

3.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Removed a total of 0 cells.

3.12.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Removed 0 unused cells and 12 unused wires.

3.12.5. Finished fast OPT passes.

3.13. Executing MEMORY pass.

3.13.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.13.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Removed 0 unused cells and 12 unused wires.

3.13.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.13.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Removed 0 unused cells and 12 unused wires.

3.13.5. Executing MEMORY_COLLECT pass (generating $mem cells).

3.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Removed 0 unused cells and 12 unused wires.

3.15. Executing OPT pass (performing simple optimizations).

3.15.1. Executing OPT_EXPR pass (perform const folding).
Replacing $mux cell `$procmux$14' in module `counter' with or-gate.
Replacing $mux cell `$procmux$20' in module `counter' with or-gate.

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Removed a total of 0 cells.

3.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Removed 0 unused cells and 12 unused wires.

3.15.5. Finished fast OPT passes.

3.16. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Removed a total of 0 cells.

3.17.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$11 (pure)
    Root of a mux tree: $procmux$17 (pure)
    Root of a mux tree: $procmux$23 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.17.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter.
Performed a total of 0 changes.

3.17.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Removed a total of 0 cells.

3.17.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.17.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Removed 0 unused cells and 12 unused wires.

3.17.8. Executing OPT_EXPR pass (perform const folding).

3.17.9. Finished OPT passes. (There is nothing left to do.)

3.18. Executing TECHMAP pass (map to technology primitives).

3.18.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.
Mapping counter.$logic_not$/home/leviathan/qtflow_test2/source/counter.v:14$3 ($logic_not) with simplemap.
Mapping counter.$logic_not$/home/leviathan/qtflow_test2/source/counter.v:15$4 ($logic_not) with simplemap.
Mapping counter.$logic_not$/home/leviathan/qtflow_test2/source/counter.v:16$5 ($logic_not) with simplemap.
Mapping counter.$logic_not$/home/leviathan/qtflow_test2/source/counter.v:17$6 ($logic_not) with simplemap.
Mapping counter.$procmux$11 ($mux) with simplemap.
Mapping counter.$procmux$14 ($or) with simplemap.
Mapping counter.$procmux$17 ($mux) with simplemap.
Mapping counter.$procmux$20 ($or) with simplemap.

3.18.2. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_alu'.
Parameter \A_SIGNED = 0
Parameter \B_SIGNED = 0
Parameter \A_WIDTH = 4
Parameter \B_WIDTH = 4
Parameter \Y_WIDTH = 4
Generating RTLIL representation for module `$paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=4\Y_WIDTH=4'.

3.18.3. Continuing TECHMAP pass.
Mapping counter.$auto$alumacc.cc:474:replace_alu$27 using $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=4\Y_WIDTH=4.
Mapping counter.$procmux$23 ($mux) with simplemap.
Mapping counter.$procdff$25 ($dff) with simplemap.
Mapping counter.$procdff$26 ($dff) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:474:replace_alu$27.$xor$<techmap.v>:262$88 ($xor) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:474:replace_alu$27.$xor$<techmap.v>:263$89 ($xor) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:474:replace_alu$27.$and$<techmap.v>:260$87 ($and) with simplemap.

3.18.4. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_lcu'.
Parameter \WIDTH = 4
Generating RTLIL representation for module `$paramod\_90_lcu\WIDTH=4'.

3.18.5. Executing PROC pass (convert processes to netlists).

3.18.5.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.18.5.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.18.5.3. Executing PROC_INIT pass (extract init attributes).

3.18.5.4. Executing PROC_ARST pass (detect async resets in processes).

3.18.5.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod\_90_lcu\WIDTH=4.$proc$<techmap.v>:207$120'.
     1/8: $0\p[3:0] [2]
     2/8: $0\g[3:0] [2]
     3/8: $0\p[3:0] [3]
     4/8: $0\g[3:0] [3]
     5/8: $0\p[3:0] [1]
     6/8: $0\g[3:0] [1]
     7/8: $0\g[3:0] [0]
     8/8: $0\p[3:0] [0]

3.18.5.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `$paramod\_90_lcu\WIDTH=4.\p' from process `$paramod\_90_lcu\WIDTH=4.$proc$<techmap.v>:207$120'.
No latch inferred for signal `$paramod\_90_lcu\WIDTH=4.\g' from process `$paramod\_90_lcu\WIDTH=4.$proc$<techmap.v>:207$120'.

3.18.5.7. Executing PROC_DFF pass (convert process syncs to FFs).

3.18.5.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `$paramod\_90_lcu\WIDTH=4.$proc$<techmap.v>:207$120'.
Cleaned up 0 empty switches.

3.18.6. Executing OPT pass (performing simple optimizations).

3.18.6.1. Executing OPT_EXPR pass (perform const folding).

3.18.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\_90_lcu\WIDTH=4'.
Removed a total of 0 cells.

3.18.6.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.18.6.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\_90_lcu\WIDTH=4..
  removing unused `$and' cell `$and$<techmap.v>:222$125'.
  removing unused `$and' cell `$and$<techmap.v>:222$131'.
  removing unused `$and' cell `$and$<techmap.v>:230$134'.
  removing unused non-port wire \j.
  removing unused non-port wire \i.
  removed 11 unused temporary wires.
Removed 3 unused cells and 23 unused wires.

3.18.6.5. Finished fast OPT passes.

3.18.7. Continuing TECHMAP pass.
Mapping counter.$auto$alumacc.cc:474:replace_alu$27.lcu using $paramod\_90_lcu\WIDTH=4.
Mapping counter.$techmap$auto$alumacc.cc:474:replace_alu$27.$ternary$<techmap.v>:258$86 ($mux) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:474:replace_alu$27.$not$<techmap.v>:258$85 ($not) with simplemap.
Mapping counter.$auto$alumacc.cc:474:replace_alu$27.B_conv ($pos) with simplemap.
Mapping counter.$auto$alumacc.cc:474:replace_alu$27.A_conv ($pos) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:474:replace_alu$27.lcu.$or$<techmap.v>:221$124 ($or) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:474:replace_alu$27.lcu.$or$<techmap.v>:212$122 ($or) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:474:replace_alu$27.lcu.$and$<techmap.v>:229$132 ($and) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:474:replace_alu$27.lcu.$and$<techmap.v>:222$128 ($and) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:474:replace_alu$27.lcu.$and$<techmap.v>:221$129 ($and) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:474:replace_alu$27.lcu.$and$<techmap.v>:221$126 ($and) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:474:replace_alu$27.lcu.$and$<techmap.v>:221$123 ($and) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:474:replace_alu$27.lcu.$and$<techmap.v>:212$121 ($and) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:474:replace_alu$27.lcu.$or$<techmap.v>:221$127 ($or) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:474:replace_alu$27.lcu.$or$<techmap.v>:221$130 ($or) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:474:replace_alu$27.lcu.$or$<techmap.v>:229$133 ($or) with simplemap.
No more expansions possible.

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$135' (??0) in module `\counter' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$27.$ternary$<techmap.v>:258$86_Y [0] = \r [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$103' (?0) in module `\counter' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$27.$xor$<techmap.v>:263$89_Y [0] = $techmap$auto$alumacc.cc:474:replace_alu$27.$xor$<techmap.v>:262$88_Y [0]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$136' (??0) in module `\counter' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$27.$ternary$<techmap.v>:258$86_Y [1] = \r [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$150' (const_and) in module `\counter' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$27.lcu.$and$<techmap.v>:212$121_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$144' (and_or_buffer) in module `\counter' with constant driver `$auto$alumacc.cc:491:replace_alu$29 [0] = $techmap$auto$alumacc.cc:474:replace_alu$27.$and$<techmap.v>:260$87_Y [0]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$137' (??0) in module `\counter' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$27.$ternary$<techmap.v>:258$86_Y [2] = \r [2]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$138' (??0) in module `\counter' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$27.$ternary$<techmap.v>:258$86_Y [3] = \r [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$107' (0?) in module `\counter' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$27.$xor$<techmap.v>:263$89_Y [4] = $auto$alumacc.cc:491:replace_alu$29 [3]'.

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
  Cell `$auto$simplemap.cc:206:simplemap_lognot$74' is identical to cell `$auto$simplemap.cc:37:simplemap_not$139'.
    Redirecting output \Y: $logic_not$/home/leviathan/qtflow_test2/source/counter.v:14$3_Y = $techmap$auto$alumacc.cc:474:replace_alu$27.$not$<techmap.v>:258$85_Y [0]
    Removing $_NOT_ cell `$auto$simplemap.cc:206:simplemap_lognot$74' from module `\counter'.
  Cell `$auto$simplemap.cc:206:simplemap_lognot$75' is identical to cell `$auto$simplemap.cc:37:simplemap_not$140'.
    Redirecting output \Y: $logic_not$/home/leviathan/qtflow_test2/source/counter.v:15$4_Y = $techmap$auto$alumacc.cc:474:replace_alu$27.$not$<techmap.v>:258$85_Y [1]
    Removing $_NOT_ cell `$auto$simplemap.cc:206:simplemap_lognot$75' from module `\counter'.
  Cell `$auto$simplemap.cc:206:simplemap_lognot$76' is identical to cell `$auto$simplemap.cc:37:simplemap_not$141'.
    Redirecting output \Y: $logic_not$/home/leviathan/qtflow_test2/source/counter.v:16$5_Y = $techmap$auto$alumacc.cc:474:replace_alu$27.$not$<techmap.v>:258$85_Y [2]
    Removing $_NOT_ cell `$auto$simplemap.cc:206:simplemap_lognot$76' from module `\counter'.
  Cell `$auto$simplemap.cc:206:simplemap_lognot$77' is identical to cell `$auto$simplemap.cc:37:simplemap_not$142'.
    Redirecting output \Y: $logic_not$/home/leviathan/qtflow_test2/source/counter.v:17$6_Y = $techmap$auto$alumacc.cc:474:replace_alu$27.$not$<techmap.v>:258$85_Y [3]
    Removing $_NOT_ cell `$auto$simplemap.cc:206:simplemap_lognot$77' from module `\counter'.
Removed a total of 4 cells.

3.19.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.19.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$111'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$146'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$147'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$148'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$151'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$152'.
  removed 27 unused temporary wires.
Removed 9 unused cells and 50 unused wires.

3.19.5. Finished fast OPT passes.

3.20. Executing ABC pass (technology mapping using ABC).

3.20.1. Extracting gate netlist of module `\counter' to `<abc-temp-dir>/input.blif'..
Extracted 26 gates and 36 wires to a netlist network with 9 inputs and 8 outputs.

3.20.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.20.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:            ANDNOT cells:        4
ABC RESULTS:              AOI3 cells:        1
ABC RESULTS:              NAND cells:        2
ABC RESULTS:               NOR cells:        2
ABC RESULTS:               NOT cells:        1
ABC RESULTS:              OAI3 cells:        1
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:              XNOR cells:        4
ABC RESULTS:               XOR cells:        3
ABC RESULTS:        internal signals:       19
ABC RESULTS:           input signals:        9
ABC RESULTS:          output signals:        8
Removing temp directory.

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Removed a total of 0 cells.

3.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
  removed 27 unused temporary wires.
Removed 9 unused cells and 77 unused wires.

3.21.5. Finished fast OPT passes.

3.22. Executing HIERARCHY pass (managing design hierarchy).

3.22.1. Analyzing design hierarchy..
Top module:  \counter

3.22.2. Analyzing design hierarchy..
Top module:  \counter
Removed 0 unused modules.

3.23. Printing statistics.

=== counter ===

   Number of wires:                 19
   Number of wire bits:             31
   Number of public wires:           4
   Number of public wire bits:      10
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 29
     $_ANDNOT_                       4
     $_AND_                          1
     $_AOI3_                         1
     $_DFF_P_                        8
     $_NAND_                         2
     $_NOR_                          2
     $_NOT_                          1
     $_OAI3_                         1
     $_ORNOT_                        2
     $_XNOR_                         4
     $_XOR_                          3

3.24. Executing CHECK pass (checking for obvious problems).
checking module counter..
found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=96.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=96.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=176.00) is a direct match for cell type $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
  create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
  create mapping for $_DFF_NN0_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NN1_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NP0_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_NP1_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_PN0_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PN1_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PP0_ from mapping for $_DFFSR_PPP_.
  create mapping for $_DFF_PP1_ from mapping for $_DFFSR_PPP_.
  final dff cell mappings:
    DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    DFFSR _DFF_NN0_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_NN1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_NP0_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_NP1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_PP0_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_PP1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFFSR_NNN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_NNP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_NPN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_NPP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S(~S));
    DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_PNP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_PPN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_PPP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S(~S));
Mapping DFF cells in module `\counter':
  mapped 8 $_DFF_P_ cells to \DFFPOSX1 cells.

5. Executing ABC pass (technology mapping using ABC).

5.1. Extracting gate netlist of module `\counter' to `<abc-temp-dir>/input.blif'..
Extracted 21 gates and 30 wires to a netlist network with 9 inputs and 8 outputs.

5.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/leviathan/qtflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.01 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/home/leviathan/qtflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func).  Time =     0.01 sec
ABC: Memory =    0.36 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

5.1.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:           AOI21X1 cells:        4
ABC RESULTS:             INVX1 cells:        2
ABC RESULTS:           NAND2X1 cells:        4
ABC RESULTS:            NOR2X1 cells:        4
ABC RESULTS:           OAI21X1 cells:        5
ABC RESULTS:           XNOR2X1 cells:        1
ABC RESULTS:            XOR2X1 cells:        2
ABC RESULTS:        internal signals:       13
ABC RESULTS:           input signals:        9
ABC RESULTS:          output signals:        8
Removing temp directory.

6. Executing FLATTEN pass (flatten design).
No more expansions possible.
Removed 0 unused cells and 30 unused wires.

7. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Don't map input port counter.clk: Missing option -inpad.
Don't map input port counter.clr: Missing option -inpad.
Mapping port counter.q using BUFX2.

8. Executing OPT pass (performing simple optimizations).

8.1. Executing OPT_EXPR pass (perform const folding).

8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Removed a total of 0 cells.

8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter.
Performed a total of 0 changes.

8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Removed a total of 0 cells.

8.6. Executing OPT_RMDFF pass (remove dff with constant values).

8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Removed 0 unused cells and 30 unused wires.

8.8. Executing OPT_EXPR pass (perform const folding).

8.9. Finished OPT passes. (There is nothing left to do.)

9. Executing BLIF backend.

End of script. Logfile hash: 7a725dcff5
CPU: user 0.14s system 0.01s, MEM: 38.67 MB total, 11.84 MB resident
Yosys 0.7+ (git sha1 UNKNOWN, gcc 7.2.1 -fPIC -Os)
Time spent: 20% 1x share (0 sec), 11% 14x opt_clean (0 sec), ...
Cleaning up output syntax
Cleaning Up blif file syntax
Running blifFanout (iterative)

Parsing library "osu018_stdcells"
End of library at line 6141
Lib Read:  Processed 6142 lines.
Top internal fanout is 6 (load 187.971) from node _4_,
driven by INVX1 with strength 117.23 (fF driven at latency 200)
Top fanout load-to-strength ratio is 0.894253 (latency = 178.851 ps)
Top input node fanout is 8 (load 223.388) from node clk.
0 gates exceed specified minimum load.
0 buffers were added.
0 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 30    	Out: 30    	+0
	"2" gates	In: 5    	Out: 5    	+0

gates resized: 0

Generating RTL verilog and SPICE netlist file in directory
	 /home/leviathan/qtflow_test2/synthesis
Files:
   Verilog: /home/leviathan/qtflow_test2/synthesis/counter.rtl.v
   Verilog: /home/leviathan/qtflow_test2/synthesis/counter.rtlnopwr.v
   Spice:   /home/leviathan/qtflow_test2/synthesis/counter.spc

Running blif2Verilog.
Running blif2BSpice.
Running spi2xspice.py
Synthesis script ended on Tue Nov 7 18:21:32 HKT 2017
